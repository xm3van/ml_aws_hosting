{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "46fe0bfb-97a3-48b9-8057-6623542411a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#visualisation\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "# Data manipulation \n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# ML \n",
    "import pickle # save model essentially\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# load dataset\n",
    "df_train = pd.read_csv('train.csv')\n",
    "df_test = pd.read_csv('test.csv')\n",
    "\n",
    "# 4Cs\n",
    "\n",
    "## getting titles\n",
    "\n",
    "def get_title(name):\n",
    "    \n",
    "    if '.' in name: \n",
    "        \n",
    "        return name.split(',')[1].split('.')[0].strip()\n",
    "    \n",
    "    else:\n",
    "        \n",
    "        return \"No title in name\"\n",
    "\n",
    "def shorter_titles(x):\n",
    "    title = x['Title']\n",
    "    \n",
    "    if title in ['Capt', 'Col', 'Major']:\n",
    "        return 'Officer'\n",
    "    \n",
    "    elif title in ['Jonkheer', 'Don', 'Dona', 'the Countess', 'Dons', 'Lady', 'Sir']:\n",
    "        return 'Royalty'\n",
    "    \n",
    "    elif title == 'Mme':\n",
    "        return 'Mrs'\n",
    "    \n",
    "    elif title in ['Mlle', 'Ms']:\n",
    "        return 'Miss'\n",
    "    \n",
    "    else:\n",
    "        return title\n",
    "    \n",
    "    \n",
    "\n",
    "## futher corrections\n",
    "\n",
    "df_train['Title'] = df_train['Name'].map(lambda x: get_title(x))\n",
    "df_train['Title'] = df_train.apply(shorter_titles, axis=1)\n",
    "\n",
    "df_train['Age'].fillna(df_train['Age'].median(), inplace=True)\n",
    "df_train['Fare'].fillna(df_train['Fare'].median(), inplace=True)\n",
    "df_train[\"Embarked\"].fillna(\"S\", inplace=True)\n",
    "\n",
    "df_train.drop(\"Cabin\", axis=1, inplace=True)\n",
    "df_train.drop(\"Ticket\", axis=1, inplace=True)\n",
    "df_train.drop(\"Name\", axis=1, inplace=True)\n",
    "\n",
    "\n",
    "df_train.Sex.replace(('male','female'),(0,1), inplace=True)\n",
    "df_train.Embarked.replace(('S','C', 'Q'),(0,1,2), inplace=True)\n",
    "df_train.Title.replace(('Mr', 'Mrs', 'Miss', 'Master', 'Royalty', 'Rev', 'Dr', 'Officer'),(0, 1, 2, 3, 4, 5, 6, 7), inplace=True)\n",
    "\n",
    "# ML\n",
    "\n",
    "y = df_train['Survived']\n",
    "x = df_train.drop(['Survived', 'PassengerId'], axis=1)\n",
    "\n",
    "x_train, x_val, y_train, y_val = train_test_split(x,y,test_size=0.1)\n",
    "\n",
    "randomforest = RandomForestClassifier()\n",
    "randomforest.fit(x_train, y_train) \n",
    "y_pred = randomforest.predict(x_val)\n",
    "acc_randomforest = accuracy_score(y_pred,y_val)\n",
    "\n",
    "\n",
    "\n",
    "# save model \n",
    "pickle.dump(randomforest, open('titanic_model.sav', 'wb'))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
